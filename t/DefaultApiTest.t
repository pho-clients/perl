=begin comment

Social Graph API

Pho Networks REST API

OpenAPI spec version: 1.1.1
Contact: emre@phonetworks.org
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by Swagger Codegen
# Please update the test cases below to test the API endpoints.
# Ref: https://github.com/swagger-api/swagger-codegen
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('PhoClient::DefaultApi');

my $api = PhoClient::DefaultApi->new();
isa_ok($api, 'PhoClient::DefaultApi');

#
# add_attribute test
#
{
    my $value = undef; # replace NULL with a proper value
    my $result = $api->add_attribute(value => $value);
}

#
# del_attribute test
#
{
    my $result = $api->del_attribute();
}

#
# del_entity test
#
{
    my $result = $api->del_entity();
}

#
# get_all_edges test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_all_edges(uuid => $uuid);
}

#
# get_attribute test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $key = undef; # replace NULL with a proper value
    my $result = $api->get_attribute(uuid => $uuid, key => $key);
}

#
# get_attributes test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_attributes(uuid => $uuid);
}

#
# get_edge test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_edge(uuid => $uuid);
}

#
# get_edge_getters test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_edge_getters(uuid => $uuid);
}

#
# get_edge_setters test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_edge_setters(uuid => $uuid);
}

#
# get_founder test
#
{
    my $result = $api->get_founder();
}

#
# get_graph test
#
{
    my $result = $api->get_graph();
}

#
# get_incoming_edges test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_incoming_edges(uuid => $uuid);
}

#
# get_node test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_node(uuid => $uuid);
}

#
# get_node_edge test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $edge = undef; # replace NULL with a proper value
    my $result = $api->get_node_edge(uuid => $uuid, edge => $edge);
}

#
# get_outgoing_edges test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_outgoing_edges(uuid => $uuid);
}

#
# get_space test
#
{
    my $result = $api->get_space();
}

#
# get_type test
#
{
    my $uuid = undef; # replace NULL with a proper value
    my $result = $api->get_type(uuid => $uuid);
}

#
# make_actor test
#
{
    my $param1 = undef; # replace NULL with a proper value
    my $result = $api->make_actor(param1 => $param1);
}

#
# make_edge test
#
{
    my $param1 = undef; # replace NULL with a proper value
    my $result = $api->make_edge(param1 => $param1);
}

#
# set_attribute test
#
{
    my $value = undef; # replace NULL with a proper value
    my $result = $api->set_attribute(value => $value);
}


1;
